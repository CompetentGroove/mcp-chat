# Cline Rules for y-gui

I am Cline, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.

## Memory Bank Structure

The Memory Bank consists of core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]

### Core Files (Required)
1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations
   - Important patterns and preferences
   - Learnings and project insights

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships
   - Critical implementation paths

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies
   - Tool usage patterns

6. `progress.md`
   - What works
   - What's left to build
   - Current status
   - Known issues
   - Evolution of project decisions

### Additional Context
Create additional files/folders within memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## Core Workflows

### Plan Mode
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]

### Act Mode
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Execute[Execute Task]
    Execute --> Document[Document Changes]

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory bank** (MUST review ALL files)
4. When context needs clarification

flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Document Insights & Patterns]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process

Note: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.

## Auth0 Integration

### Authentication Patterns
- Always use the useAuth0 hook from @auth0/auth0-react for authentication state
- Use the isAuthenticated flag to determine if a user is logged in
- Use the isLoading flag to show loading states during authentication
- Use the getAccessTokenSilently function to get the Auth0 token for API calls
- Use the loginWithRedirect function for login
- Use the logout function for logout

### API Authentication
- Use the useAuthenticatedSWR hook from utils/api.ts for authenticated SWR requests
- Use the useApi hook from utils/api.ts for authenticated API calls without SWR
- Always include the Auth0 token in the Authorization header for API calls

### Auth0 Configuration
- Auth0 configuration is in index.tsx in the Auth0Provider component
- Auth0 domain and clientId should be configured in the Auth0Provider
- The redirect_uri should be set to window.location.origin

### Google Login
- Google login is enabled through Auth0 social connections
- Use the connection parameter in loginWithRedirect to specify Google login:
  ```tsx
  loginWithRedirect({
    authorizationParams: {
      connection: 'google-oauth2'
    }
  })
  ```

## Project Patterns

### Component Structure
- Use functional components with hooks
- Use TypeScript for type safety
- Use Tailwind CSS for styling
- Use SWR for data fetching
- Use React Router for navigation
- Use React Context for global state

### API Calls
- Use SWR for data fetching when possible
- Use the fetch API for direct API calls
- Always include error handling for API calls
- Use try/catch blocks for async/await calls

### Styling
- Use Tailwind CSS for styling
- Use the ThemeContext for dark/light mode
- Use responsive design for all components
- Use the isDarkMode flag from ThemeContext to conditionally apply styles

### Error Handling
- Use try/catch blocks for async/await calls
- Use error boundaries for component errors
- Use loading states for async operations
- Use error states for API errors

### State Management
- Use React hooks for local state
- Use React Context for global state
- Use SWR for remote state
- Use optimistic updates for better UX

### File Organization
- Components in src/components
- Contexts in src/contexts
- Utilities in src/utils
- Types in shared/types
- API endpoints in backend/src/api
- Middleware in backend/src/middleware
- Repository in backend/src/repository
